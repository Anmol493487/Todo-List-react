{"ast":null,"code":"// features/tasksSlice.js\n// This file defines a Redux slice for managing tasks in the application.\n\n// Importing necessary module from Redux Toolkit\nimport { createSlice } from \"@reduxjs/toolkit\";\n\n// Creating a slice for tasks using createSlice function\nconst tasksSlice = createSlice({\n  name: \"tasks\",\n  // Name of the slice\n  initialState: JSON.parse(localStorage.getItem(\"tasks\")) || [],\n  // Initial state fetched from localStorage or an empty array\n  reducers: {\n    // Reducer function to add a new task\n    addTask(state, action) {\n      state.push({\n        id: Date.now(),\n        text: action.payload,\n        completed: false\n      }); // Pushing a new task object with provided text and default completion status\n      localStorage.setItem(\"tasks\", JSON.stringify(state)); // Updating localStorage with the updated state\n    },\n    // Reducer function to toggle completion status of a task\n    toggleTaskCompleted(state, action) {\n      const taskId = action.payload; // Extracting the task ID from the action payload\n      const taskToUpdate = state.find(task => task.id === taskId); // Finding the task in the state array\n      if (taskToUpdate) {\n        taskToUpdate.completed = !taskToUpdate.completed; // Toggling the completion status of the task\n        localStorage.setItem(\"tasks\", JSON.stringify(state)); // Updating localStorage with the updated state\n      }\n    },\n    // Reducer function to delete a task\n    deleteTask(state, action) {\n      const taskId = action.payload; // Extracting the task ID from the action payload\n      const filteredTasks = state.filter(task => task.id !== taskId); // Filtering out the task to be deleted\n      localStorage.setItem(\"tasks\", JSON.stringify(filteredTasks)); // Updating localStorage with the filtered state\n      return filteredTasks; // Returning the filtered state\n    }\n  }\n});\n\n// Exporting action creators and reducer from the slice\nexport const {\n  addTask,\n  toggleTaskCompleted,\n  deleteTask\n} = tasksSlice.actions;\nexport default tasksSlice.reducer; // Exporting the reducer function","map":{"version":3,"names":["createSlice","tasksSlice","name","initialState","JSON","parse","localStorage","getItem","reducers","addTask","state","action","push","id","Date","now","text","payload","completed","setItem","stringify","toggleTaskCompleted","taskId","taskToUpdate","find","task","deleteTask","filteredTasks","filter","actions","reducer"],"sources":["D:/to-do-list/src/tasksSlice.js"],"sourcesContent":["// features/tasksSlice.js\r\n// This file defines a Redux slice for managing tasks in the application.\r\n\r\n// Importing necessary module from Redux Toolkit\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// Creating a slice for tasks using createSlice function\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\", // Name of the slice\r\n  initialState: JSON.parse(localStorage.getItem(\"tasks\")) || [], // Initial state fetched from localStorage or an empty array\r\n  reducers: {\r\n    // Reducer function to add a new task\r\n    addTask(state, action) {\r\n      state.push({ id: Date.now(), text: action.payload, completed: false }); // Pushing a new task object with provided text and default completion status\r\n      localStorage.setItem(\"tasks\", JSON.stringify(state)); // Updating localStorage with the updated state\r\n    },\r\n    // Reducer function to toggle completion status of a task\r\n    toggleTaskCompleted(state, action) {\r\n      const taskId = action.payload; // Extracting the task ID from the action payload\r\n      const taskToUpdate = state.find((task) => task.id === taskId); // Finding the task in the state array\r\n      if (taskToUpdate) {\r\n        taskToUpdate.completed = !taskToUpdate.completed; // Toggling the completion status of the task\r\n        localStorage.setItem(\"tasks\", JSON.stringify(state)); // Updating localStorage with the updated state\r\n      }\r\n    },\r\n    // Reducer function to delete a task\r\n    deleteTask(state, action) {\r\n      const taskId = action.payload; // Extracting the task ID from the action payload\r\n      const filteredTasks = state.filter((task) => task.id !== taskId); // Filtering out the task to be deleted\r\n      localStorage.setItem(\"tasks\", JSON.stringify(filteredTasks)); // Updating localStorage with the filtered state\r\n      return filteredTasks; // Returning the filtered state\r\n    }\r\n  }\r\n});\r\n\r\n// Exporting action creators and reducer from the slice\r\nexport const { addTask, toggleTaskCompleted, deleteTask } = tasksSlice.actions;\r\nexport default tasksSlice.reducer; // Exporting the reducer function\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,UAAU,GAAGD,WAAW,CAAC;EAC7BE,IAAI,EAAE,OAAO;EAAE;EACfC,YAAY,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE;EAAE;EAC/DC,QAAQ,EAAE;IACR;IACAC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACrBD,KAAK,CAACE,IAAI,CAAC;QAAEC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QAAEC,IAAI,EAAEL,MAAM,CAACM,OAAO;QAAEC,SAAS,EAAE;MAAM,CAAC,CAAC,CAAC,CAAC;MACxEZ,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEf,IAAI,CAACgB,SAAS,CAACV,KAAK,CAAC,CAAC,CAAC,CAAC;IACxD,CAAC;IACD;IACAW,mBAAmBA,CAACX,KAAK,EAAEC,MAAM,EAAE;MACjC,MAAMW,MAAM,GAAGX,MAAM,CAACM,OAAO,CAAC,CAAC;MAC/B,MAAMM,YAAY,GAAGb,KAAK,CAACc,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACZ,EAAE,KAAKS,MAAM,CAAC,CAAC,CAAC;MAC/D,IAAIC,YAAY,EAAE;QAChBA,YAAY,CAACL,SAAS,GAAG,CAACK,YAAY,CAACL,SAAS,CAAC,CAAC;QAClDZ,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEf,IAAI,CAACgB,SAAS,CAACV,KAAK,CAAC,CAAC,CAAC,CAAC;MACxD;IACF,CAAC;IACD;IACAgB,UAAUA,CAAChB,KAAK,EAAEC,MAAM,EAAE;MACxB,MAAMW,MAAM,GAAGX,MAAM,CAACM,OAAO,CAAC,CAAC;MAC/B,MAAMU,aAAa,GAAGjB,KAAK,CAACkB,MAAM,CAAEH,IAAI,IAAKA,IAAI,CAACZ,EAAE,KAAKS,MAAM,CAAC,CAAC,CAAC;MAClEhB,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEf,IAAI,CAACgB,SAAS,CAACO,aAAa,CAAC,CAAC,CAAC,CAAC;MAC9D,OAAOA,aAAa,CAAC,CAAC;IACxB;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAElB,OAAO;EAAEY,mBAAmB;EAAEK;AAAW,CAAC,GAAGzB,UAAU,CAAC4B,OAAO;AAC9E,eAAe5B,UAAU,CAAC6B,OAAO,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}