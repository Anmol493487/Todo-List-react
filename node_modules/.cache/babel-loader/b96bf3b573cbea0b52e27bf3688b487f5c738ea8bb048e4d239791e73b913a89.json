{"ast":null,"code":"var _jsxFileName = \"D:\\\\to-do-list\\\\src\\\\TaskList.js\",\n  _s = $RefreshSig$();\n// TaskList.js\n// This file defines the TaskList component responsible for displaying the list of tasks.\n\n// Importing necessary modules from React and Redux\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { toggleTaskCompleted, deleteTask } from \"./tasksSlice\";\n\n// Functional component for the TaskList\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList() {\n  _s();\n  // Accessing tasks from the Redux store\n  const tasks = useSelector(state => state.tasks);\n  const dispatch = useDispatch();\n\n  // Function to handle toggling task completion status\n  const handleToggleTaskCompleted = taskId => {\n    dispatch(toggleTaskCompleted(taskId));\n  };\n\n  // Function to handle deleting a task\n  const handleDeleteTask = taskId => {\n    dispatch(deleteTask(taskId));\n  };\n\n  // Rendering the task list\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-list\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: task.completed ? \"completed\" : \"\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => handleToggleTaskCompleted(task.id),\n            style: {\n              cursor: \"pointer\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"task-text \".concat(task.completed ? \"completed-text\" : \"\"),\n              children: task.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"segment\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteTask(task.id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleToggleTaskCompleted(task.id),\n              children: task.completed ? \"Completed\" : \"Complete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this)\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"CsZaW/tJMRku090Oh9Epf38CEO8=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = TaskList;\nexport default TaskList; // Exporting the TaskList component for use in other parts of the application\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useSelector","useDispatch","toggleTaskCompleted","deleteTask","jsxDEV","_jsxDEV","TaskList","_s","tasks","state","dispatch","handleToggleTaskCompleted","taskId","handleDeleteTask","className","children","map","task","completed","onClick","id","style","cursor","concat","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/to-do-list/src/TaskList.js"],"sourcesContent":["// TaskList.js\r\n// This file defines the TaskList component responsible for displaying the list of tasks.\r\n\r\n// Importing necessary modules from React and Redux\r\nimport React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { toggleTaskCompleted, deleteTask } from \"./tasksSlice\";\r\n\r\n// Functional component for the TaskList\r\nfunction TaskList() {\r\n  // Accessing tasks from the Redux store\r\n  const tasks = useSelector((state) => state.tasks);\r\n  const dispatch = useDispatch();\r\n\r\n  // Function to handle toggling task completion status\r\n  const handleToggleTaskCompleted = (taskId) => {\r\n    dispatch(toggleTaskCompleted(taskId));\r\n  };\r\n\r\n  // Function to handle deleting a task\r\n  const handleDeleteTask = (taskId) => {\r\n    dispatch(deleteTask(taskId));\r\n  };\r\n\r\n  // Rendering the task list\r\n  return (\r\n    <div className=\"task-list\">\r\n      <ul>\r\n        {tasks.map((task) => (\r\n          <li key={task.id} className={task.completed ? \"completed\" : \"\"}>\r\n            {/* Displaying task text with option to toggle completion status */}\r\n            <div>\r\n            <span\r\n              onClick={() => handleToggleTaskCompleted(task.id)}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              <span\r\n                className={`task-text ${\r\n                  task.completed ? \"completed-text\" : \"\"\r\n                }`}\r\n              >\r\n                {task.text}\r\n              </span>\r\n            </span>\r\n            {/* Buttons to delete task and toggle completion status */}\r\n            <span className=\"segment\">\r\n              <button onClick={() => handleDeleteTask(task.id)}>Delete</button>\r\n              <button onClick={() => handleToggleTaskCompleted(task.id)}>\r\n                {task.completed ? \"Completed\" : \"Complete\"}\r\n              </button>\r\n            </span>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskList; // Exporting the TaskList component for use in other parts of the application\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,mBAAmB,EAAEC,UAAU,QAAQ,cAAc;;AAE9D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB;EACA,MAAMC,KAAK,GAAGR,WAAW,CAAES,KAAK,IAAKA,KAAK,CAACD,KAAK,CAAC;EACjD,MAAME,QAAQ,GAAGT,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMU,yBAAyB,GAAIC,MAAM,IAAK;IAC5CF,QAAQ,CAACR,mBAAmB,CAACU,MAAM,CAAC,CAAC;EACvC,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAID,MAAM,IAAK;IACnCF,QAAQ,CAACP,UAAU,CAACS,MAAM,CAAC,CAAC;EAC9B,CAAC;;EAED;EACA,oBACEP,OAAA;IAAKS,SAAS,EAAC,WAAW;IAAAC,QAAA,eACxBV,OAAA;MAAAU,QAAA,EACGP,KAAK,CAACQ,GAAG,CAAEC,IAAI,iBACdZ,OAAA;QAAkBS,SAAS,EAAEG,IAAI,CAACC,SAAS,GAAG,WAAW,GAAG,EAAG;QAAAH,QAAA,eAE7DV,OAAA;UAAAU,QAAA,gBACAV,OAAA;YACEc,OAAO,EAAEA,CAAA,KAAMR,yBAAyB,CAACM,IAAI,CAACG,EAAE,CAAE;YAClDC,KAAK,EAAE;cAAEC,MAAM,EAAE;YAAU,CAAE;YAAAP,QAAA,eAE7BV,OAAA;cACES,SAAS,eAAAS,MAAA,CACPN,IAAI,CAACC,SAAS,GAAG,gBAAgB,GAAG,EAAE,CACrC;cAAAH,QAAA,EAEFE,IAAI,CAACO;YAAI;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eAEPvB,OAAA;YAAMS,SAAS,EAAC,SAAS;YAAAC,QAAA,gBACvBV,OAAA;cAAQc,OAAO,EAAEA,CAAA,KAAMN,gBAAgB,CAACI,IAAI,CAACG,EAAE,CAAE;cAAAL,QAAA,EAAC;YAAM;cAAAU,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACjEvB,OAAA;cAAQc,OAAO,EAAEA,CAAA,KAAMR,yBAAyB,CAACM,IAAI,CAACG,EAAE,CAAE;cAAAL,QAAA,EACvDE,IAAI,CAACC,SAAS,GAAG,WAAW,GAAG;YAAU;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF;MAAC,GAtBCX,IAAI,CAACG,EAAE;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAuBZ,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACrB,EAAA,CAhDQD,QAAQ;EAAA,QAEDN,WAAW,EACRC,WAAW;AAAA;AAAA4B,EAAA,GAHrBvB,QAAQ;AAkDjB,eAAeA,QAAQ,CAAC,CAAC;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}